// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CompoundAllocationStrategy extends ethereum.SmartContract {
  static bind(address: Address): CompoundAllocationStrategy {
    return new CompoundAllocationStrategy(
      "CompoundAllocationStrategy",
      address
    );
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangeRateStored(): BigInt {
    let result = super.call(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrueInterest(): boolean {
    let result = super.call("accrueInterest", "accrueInterest():(bool)", []);

    return result[0].toBoolean();
  }

  try_accrueInterest(): ethereum.CallResult<boolean> {
    let result = super.tryCall("accrueInterest", "accrueInterest():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  investUnderlying(investAmount: BigInt): BigInt {
    let result = super.call(
      "investUnderlying",
      "investUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(investAmount)]
    );

    return result[0].toBigInt();
  }

  try_investUnderlying(investAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "investUnderlying",
      "investUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(investAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(redeemAmount: BigInt): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(redeemAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InvestUnderlyingCall extends ethereum.Call {
  get inputs(): InvestUnderlyingCall__Inputs {
    return new InvestUnderlyingCall__Inputs(this);
  }

  get outputs(): InvestUnderlyingCall__Outputs {
    return new InvestUnderlyingCall__Outputs(this);
  }
}

export class InvestUnderlyingCall__Inputs {
  _call: InvestUnderlyingCall;

  constructor(call: InvestUnderlyingCall) {
    this._call = call;
  }

  get investAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InvestUnderlyingCall__Outputs {
  _call: InvestUnderlyingCall;

  constructor(call: InvestUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
